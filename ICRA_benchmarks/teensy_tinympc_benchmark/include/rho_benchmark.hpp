// rho_benchmark.hpp
#pragma once
#include <cstdint>  // for uint32_t
#include <cstring>  // for memcpy
#include <cmath>    // for sqrt, abs
#include <algorithm> // for min, max
#include <Arduino.h>

// Dimensions
#define BENCH_NX 12
#define BENCH_NU 4

// Result structure
struct RhoBenchmarkResult {
    uint32_t time_us;
    float initial_rho;
    float final_rho;
};

// Cache matrices declarations (defined as static in cpp)
extern float Kinf[BENCH_NU][BENCH_NX];
extern float Pinf[BENCH_NX][BENCH_NX];
extern float C1[BENCH_NU][BENCH_NU];
extern float C2[BENCH_NX][BENCH_NX];

// Pre-computed sensitivity matrices declarations
extern const float dKinf_drho[BENCH_NU][BENCH_NX];
extern const float dPinf_drho[BENCH_NX][BENCH_NX];
extern const float dC1_drho[BENCH_NU][BENCH_NU];
extern const float dC2_drho[BENCH_NX][BENCH_NX];

// External dependencies needed by benchmark
extern float x_prev[BENCH_NX];
extern float u_prev[BENCH_NU];
extern float z_prev[BENCH_NX];
extern const float A_stacked[BENCH_NX + BENCH_NU][BENCH_NX + BENCH_NU];
extern const float q[BENCH_NX + BENCH_NU];

// Function declarations
void update_cache_taylor(float new_rho, float old_rho);
void initialize_benchmark_cache();  // This needs to be implemented
void benchmark_rho_adaptation(float pri_res, float dual_res, RhoBenchmarkResult* result);\



const float PINF_INIT[12][12] = {
    {74092.187704f, -73.167319f, 0.000000f, 198.053342f, 78082.549386f, 1717.656003f, 26348.957464f, -44.979013f, 0.000000f, 7.184539f, 399.820082f, 213.830097f},
    {-73.167319f, 73964.909547f, -0.000000f, -77730.404405f, -197.999696f, -686.738633f, -44.969404f, 26269.155532f, -0.000000f, -387.712050f, -7.186499f, -85.452259f},
    {0.000000f, -0.000000f, 44963.622514f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, 6235.729084f, 0.000000f, 0.000000f, 0.000000f},
    {198.053342f, -77730.404405f, 0.000000f, 295376.035129f, 910.998615f, 4979.087349f, 149.190105f, -54213.403856f, 0.000000f, 1507.510149f, 49.618732f, 687.275807f},
    {78082.549386f, -197.999696f, 0.000000f, 910.998615f, 297086.229647f, 12449.458845f, 54486.369572f, -149.178137f, 0.000000f, 49.618853f, 1600.826569f, 1718.550470f},
    {1717.656003f, -686.738633f, 0.000000f, 4979.087349f, 12449.458845f, 249846.316019f, 1575.992749f, -630.228271f, 0.000000f, 348.342573f, 870.953406f, 14433.220501f},
    {26348.957464f, -44.969404f, 0.000000f, 149.190105f, 54486.369572f, 1575.992749f, 15386.757218f, -30.020107f, 0.000000f, 6.160320f, 283.309542f, 196.304757f},
    {-44.979013f, 26269.155532f, -0.000000f, -54213.403856f, -149.178137f, -630.228271f, -30.020107f, 15332.380946f, -0.000000f, -272.368631f, -6.160959f, -78.483363f},
    {0.000000f, -0.000000f, 6235.729084f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, 3312.994426f, 0.000000f, 0.000000f, 0.000000f},
    {7.184539f, -387.712050f, -0.000000f, 1507.510149f, 49.618853f, 348.342573f, 6.160320f, -272.368631f, 0.000000f, 185.041879f, 6.126061f, 92.499883f},
    {399.820082f, -7.186499f, 0.000000f, 49.618732f, 1600.826569f, 870.953406f, 283.309542f, -6.160959f, 0.000000f, 6.126061f, 197.178200f, 231.262934f},
    {213.830097f, -85.452259f, 0.000000f, 687.275807f, 1718.550470f, 14433.220501f, 196.304757f, -78.483363f, 0.000000f, 92.499883f, 231.262934f, 3894.405009f},
};
const float C1_INIT[4][4] = {
    {0.001228f, 0.000008f, 0.001186f, 0.000009f},
    {0.000008f, 0.001223f, 0.000011f, 0.001189f},
    {0.001186f, 0.000011f, 0.001222f, 0.000013f},
    {0.000009f, 0.001189f, 0.000013f, 0.001220f},
};
const float C2_INIT[12][12] = {
    {0.999988f, -0.000000f, 0.000000f, 0.000021f, -0.019007f, 0.001094f, -0.002486f, -0.000003f, 0.000000f, 0.004264f, -3.801469f, 0.218865f},
    {-0.000000f, 0.999988f, -0.000000f, 0.019009f, -0.000021f, -0.000437f, -0.000003f, -0.002486f, -0.000000f, 3.801852f, -0.004220f, -0.087345f},
    {-0.000000f, -0.000000f, 0.995404f, 0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.459639f, 0.000000f, -0.000000f, 0.000000f},
    {0.000000f, -0.003873f, 0.000000f, 0.922624f, 0.000081f, 0.001660f, 0.000011f, -0.382279f, 0.000000f, -15.475193f, 0.016263f, 0.331965f},
    {0.003873f, -0.000000f, 0.000000f, 0.000082f, 0.922605f, 0.004161f, 0.382277f, -0.000011f, 0.000000f, 0.016384f, -15.478918f, 0.832192f},
    {0.000000f, -0.000000f, 0.000000f, 0.000245f, 0.000615f, 0.995117f, 0.000080f, -0.000032f, 0.000000f, 0.049073f, 0.122914f, -0.976627f},
    {0.019991f, -0.000000f, 0.000000f, 0.000015f, -0.013626f, 0.000769f, 0.998218f, -0.000002f, 0.000000f, 0.003037f, -2.725219f, 0.153866f},
    {-0.000000f, 0.019991f, -0.000000f, 0.013625f, -0.000015f, -0.000307f, -0.000002f, 0.998218f, -0.000000f, 2.724958f, -0.003010f, -0.061389f},
    {0.000000f, -0.000000f, 0.017587f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.758742f, -0.000000f, -0.000000f, 0.000000f},
    {0.000000f, -0.000010f, 0.000000f, 0.004679f, 0.000007f, 0.000099f, 0.000001f, -0.001266f, 0.000000f, -0.064134f, 0.001439f, 0.019701f},
    {0.000010f, -0.000000f, 0.000000f, 0.000007f, 0.004682f, 0.000247f, 0.001266f, -0.000001f, 0.000000f, 0.001444f, -0.063588f, 0.049403f},
    {0.000000f, -0.000000f, 0.000000f, 0.000029f, 0.000073f, 0.008722f, 0.000010f, -0.000004f, 0.000000f, 0.005877f, 0.014697f, 0.744465f},
};
const float KINF_INIT[4][12] = {
    {-0.216731f, 0.190402f, 1.366579f, -0.848711f, -1.066524f, -3.009834f, -0.164837f, 0.140262f, 0.717299f, -0.068030f, -0.097495f, -0.792505f},
    {0.201444f, 0.138892f, 1.366579f, -0.491749f, 1.003969f, 3.010949f, 0.153864f, 0.095762f, 0.717299f, -0.024156f, 0.093195f, 0.792117f},
    {0.126087f, -0.154187f, 1.366579f, 0.554307f, 0.330238f, -3.012637f, 0.080966f, -0.106738f, 0.717299f, 0.028459f, -0.001447f, -0.791015f},
    {-0.110799f, -0.175107f, 1.366579f, 0.786153f, -0.267683f, 3.011522f, -0.069994f, -0.129287f, 0.717299f, 0.063727f, 0.005747f, 0.791402f},
};


// Pre-computed sensitivity matrices at rho = 85.0
const float dKinf_drho[BENCH_NU][BENCH_NX] = {
    { 0.0001, -0.0000, -0.0016,  0.0002,  0.0005,  0.0033,  0.0001, -0.0000, -0.0009,  0.0000,  0.0001,  0.0010},
    {-0.0001,  0.0000, -0.0016, -0.0001, -0.0004, -0.0033, -0.0001,  0.0000, -0.0009, -0.0000, -0.0001, -0.0010},
    { 0.0000, -0.0000, -0.0016,  0.0001,  0.0004,  0.0033,  0.0000, -0.0000, -0.0009,  0.0000,  0.0001,  0.0010},
    {-0.0001,  0.0000, -0.0016, -0.0002, -0.0004, -0.0033, -0.0000,  0.0000, -0.0009, -0.0000, -0.0001, -0.0010}
};

const float dPinf_drho[BENCH_NX][BENCH_NX] = {
    { 0.0636, -0.0079, -0.0000,  0.0408,  0.2425,  0.4183,  0.0425, -0.0059, -0.0000,  0.0056,  0.0294,  0.1505},
    {-0.0079,  0.0589,  0.0000, -0.1954, -0.0409, -0.1666, -0.0059,  0.0378,  0.0000, -0.0217, -0.0056, -0.0600},
    { 0.0000,  0.0000,  9.0348,  0.0000, -0.0000,  0.0000, -0.0000,  0.0000,  6.1357,  0.0000, -0.0000,  0.0000},
    { 0.0408, -0.1954, -0.0000,  0.7039,  0.3142,  1.8467,  0.0357, -0.1284, -0.0000,  0.0834,  0.0506,  0.7094},
    { 0.2425, -0.0409,  0.0000,  0.3142,  1.2380,  4.6235,  0.1788, -0.0358, -0.0000,  0.0507,  0.1764,  1.7752},
    { 0.4183, -0.1666,  0.0000,  1.8467,  4.6235, 34.2096,  0.4407, -0.1758,  0.0000,  0.3224,  0.8063, 12.9370},
    { 0.0425, -0.0059, -0.0000,  0.0357,  0.1788,  0.4407,  0.0293, -0.0046, -0.0000,  0.0053,  0.0231,  0.1643},
    {-0.0059,  0.0378,  0.0000, -0.1284, -0.0358, -0.1758, -0.0046,  0.0244,  0.0000, -0.0145, -0.0053, -0.0656},
    {-0.0000,  0.0000,  6.1357, -0.0000, -0.0000,  0.0000,  0.0000,  0.0000,  4.2496, -0.0000,  0.0000,  0.0000},
    { 0.0056, -0.0217,  0.0000,  0.0834,  0.0507,  0.3224,  0.0053, -0.0145, -0.0000,  0.0109,  0.0086,  0.1258},
    { 0.0294, -0.0056,  0.0000,  0.0506,  0.1764,  0.8063,  0.0231, -0.0053,  0.0000,  0.0086,  0.0274,  0.3145},
    { 0.1505, -0.0600,  0.0000,  0.7094,  1.7752, 12.9370,  0.1643, -0.0656,  0.0000,  0.1258,  0.3145,  5.0369}
};

// dC1_drho is all zeros
const float dC1_drho[BENCH_NU][BENCH_NU] = {
    {-0.0, -0.0, -0.0, -0.0},
    {-0.0, -0.0, -0.0, -0.0},
    {-0.0, -0.0, -0.0, -0.0},
    {-0.0, -0.0, -0.0, -0.0}
};

const float dC2_drho[BENCH_NX][BENCH_NX] = {
    { 0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000,  0.0000, -0.0000, -0.0000,  0.0000,  0.0000, -0.0000},
    {-0.0000,  0.0000, -0.0000, -0.0000, -0.0000,  0.0000, -0.0000,  0.0000, -0.0000, -0.0000, -0.0000,  0.0000},
    { 0.0000,  0.0000,  0.0000, -0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000,  0.0000, -0.0000},
    { 0.0000, -0.0000, -0.0000,  0.0000,  0.0000, -0.0000,  0.0000, -0.0000, -0.0000,  0.0000,  0.0000, -0.0000},
    { 0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000,  0.0000, -0.0000, -0.0000,  0.0000,  0.0000, -0.0000},
    { 0.0000, -0.0000, -0.0000,  0.0000,  0.0000,  0.0000,  0.0000, -0.0000, -0.0000,  0.0000,  0.0000,  0.0000},
    { 0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000},
    {-0.0000,  0.0000,  0.0000, -0.0000, -0.0000,  0.0000, -0.0000,  0.0000,  0.0000, -0.0000, -0.0000,  0.0000},
    { 0.0000,  0.0000,  0.0005, -0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0003,  0.0000,  0.0000, -0.0000},
    { 0.0000, -0.0002,  0.0000,  0.0008,  0.0001, -0.0001,  0.0000, -0.0002,  0.0000,  0.0001,  0.0000, -0.0000},
    { 0.0002, -0.0000,  0.0000,  0.0001,  0.0007, -0.0002,  0.0002, -0.0000, -0.0000,  0.0000,  0.0001, -0.0001},
    { 0.0000, -0.0000, -0.0000,  0.0000,  0.0001,  0.0011,  0.0000, -0.0000, -0.0000,  0.0000,  0.0000,  0.0003}
};
