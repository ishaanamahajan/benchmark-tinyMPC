#include <Arduino.h>
#undef F
#include "admm.hpp"
#include "rho_benchmark.hpp"
#include "problem_data/rand_prob_tinympc_params.hpp"  // Generated by your Python script

void setup() {
    Serial.begin(115200);
    while(!Serial) { ; }
    
    Serial.println("Starting MPC Benchmark Test");
    Serial.println("Trial,Method,SolveTime,ADMMTime,RhoTime,Iterations,FinalRho");
    
    // Initialize problem & params
    tiny_problem problem;
    tiny_params params;
    
    // Initialize matrices once
    initialize_benchmark_cache();
    
    // Set tolerance and max iterations
    problem.abs_tol = 1e-3;
    problem.max_iter = 100;
    
    const int NUM_TRIALS = 10;  // Number of trials for each method
    
    // First: Run trials with fixed rho
    params.rho_adapter.analytical_method = false;
    params.rho_adapter.rho_base = 85.0f;  // Changed to 85.0
    params.cache.rho[0] = 85.0f;          // Changed to 85.0
    params.cache.rho[1] = 85.0f;          // Changed to 85.0
    
    for(int i = 0; i < NUM_TRIALS; i++) {
        // Reset problem for new trial
        problem = tiny_problem();  // Reset to default state
        problem.abs_tol = 1e-2;    // Need to reset these after tiny_problem()
        problem.max_iter = 500;
        
        // Solve
        solve_admm(&problem, &params);
        
        // Output results in CSV format
        Serial.print(i); Serial.print(",");
        Serial.print("Fixed,");
        Serial.print(problem.solve_time); Serial.print(",");
        Serial.print(problem.admm_time); Serial.print(",");
        Serial.print(problem.rho_time); Serial.print(",");
        Serial.print(problem.iter); Serial.print(",");
        Serial.println(params.cache.rho[problem.cache_level]);
        
        delay(100);  // Small delay between trials
    }
    
    // Second: Run trials with adaptive rho
    params.rho_adapter.analytical_method = true;
    params.rho_adapter.rho_base = 85.0f;  // Set initial rho for adaptive
    params.cache.rho[0] = 85.0f;
    params.cache.rho[1] = 85.0f;
    
    for(int i = 0; i < NUM_TRIALS; i++) {
        // Reset problem for new trial
        problem = tiny_problem();  // Reset to default state
        
        // Solve
        solve_admm(&problem, &params);
        
        // Output results in CSV format
        Serial.print(i); Serial.print(",");
        Serial.print("Adaptive,");
        Serial.print(problem.solve_time); Serial.print(",");
        Serial.print(problem.admm_time); Serial.print(",");
        Serial.print(problem.rho_time); Serial.print(",");
        Serial.print(problem.iter); Serial.print(",");
        Serial.println(params.cache.rho[problem.cache_level]);
        
        delay(100);  // Small delay between trials
    }
    
    Serial.println("Benchmark Complete!");
}

void loop() {
    // Empty
}