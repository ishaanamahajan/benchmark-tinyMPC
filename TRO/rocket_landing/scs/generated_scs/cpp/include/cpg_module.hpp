
/*
Auto-generated by CVXPYgen on July 20, 2025 at 21:52:31.
Content: Declarations for Python binding with pybind11.
*/

// User-defined parameters
struct CPG_Params_cpp_t {
    std::array<double, 141> param3;
    std::array<double, 6> param1;
};

// Flags for updated user-defined parameters
struct CPG_Updated_cpp_t {
    bool param3;
    bool param1;
};

// Primal solution
struct CPG_Prim_cpp_t {
    std::array<double, 141> var2;
};

// Dual solution
struct CPG_Dual_cpp_t {
    std::array<double, 6> d0;
    std::array<double, 6> d1;
    std::array<double, 6> d2;
    std::array<double, 6> d3;
    std::array<double, 6> d4;
    std::array<double, 6> d5;
    std::array<double, 6> d6;
    std::array<double, 6> d7;
    std::array<double, 6> d8;
    std::array<double, 6> d9;
    std::array<double, 6> d10;
    std::array<double, 6> d11;
    std::array<double, 6> d12;
    std::array<double, 6> d13;
    std::array<double, 6> d14;
    std::array<double, 6> d15;
    double d16;
    double d17;
    double d18;
    double d19;
    double d20;
    double d21;
    double d22;
    double d23;
    double d24;
    double d25;
    double d26;
    double d27;
    double d28;
    double d29;
    double d30;
    std::array<double, 3> d31;
    std::array<double, 3> d32;
    std::array<double, 3> d33;
    std::array<double, 3> d34;
    std::array<double, 3> d35;
    std::array<double, 3> d36;
    std::array<double, 3> d37;
    std::array<double, 3> d38;
    std::array<double, 3> d39;
    std::array<double, 3> d40;
    std::array<double, 3> d41;
    std::array<double, 3> d42;
    std::array<double, 3> d43;
    std::array<double, 3> d44;
    std::array<double, 3> d45;
    std::array<double, 3> d46;
    std::array<double, 3> d47;
    std::array<double, 3> d48;
    std::array<double, 3> d49;
    std::array<double, 3> d50;
    std::array<double, 3> d51;
    std::array<double, 3> d52;
    std::array<double, 3> d53;
    std::array<double, 3> d54;
    std::array<double, 3> d55;
    std::array<double, 3> d56;
    std::array<double, 3> d57;
    std::array<double, 3> d58;
    std::array<double, 3> d59;
    std::array<double, 3> d60;
};

// Solver information
struct CPG_Info_cpp_t {
    double obj_val;
    int iter;
    char* status;
    double pri_res;
    double dua_res;
    double time;
};

// Solution and solver information
struct CPG_Result_cpp_t {
    CPG_Prim_cpp_t prim;
    CPG_Dual_cpp_t dual;
    CPG_Info_cpp_t info;
};

// Main solve function
CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp);
