
/*
Auto-generated by CVXPYgen on July 20, 2025 at 21:52:31.
Content: Type definitions and variable declarations.
*/

#include "scs.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef scs_float cpg_float;
typedef scs_int cpg_int;

// Compressed sparse column matrix
typedef struct {
  cpg_int      *p;
  cpg_int      *i;
  cpg_float    *x;
  cpg_int      nnz;
} cpg_csc;

// Canonical parameters
typedef struct {
  cpg_csc      *P;         // Canonical parameter P
  cpg_float    *c;         // Canonical parameter c
  cpg_float    d;          // Canonical parameter d
  cpg_csc      *A;         // Canonical parameter A
  cpg_float    *b;         // Canonical parameter b
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        P;            // Bool, if canonical parameter P outdated
  int        c;            // Bool, if canonical parameter c outdated
  int        d;            // Bool, if canonical parameter d outdated
  int        A;            // Bool, if canonical parameter A outdated
  int        b;            // Bool, if canonical parameter b outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  cpg_float    *var2;      // Your variable var2
} CPG_Prim_t;

// Dual solution
typedef struct {
  cpg_float    *d0;        // Your dual variable for constraint d0
  cpg_float    *d1;        // Your dual variable for constraint d1
  cpg_float    *d2;        // Your dual variable for constraint d2
  cpg_float    *d3;        // Your dual variable for constraint d3
  cpg_float    *d4;        // Your dual variable for constraint d4
  cpg_float    *d5;        // Your dual variable for constraint d5
  cpg_float    *d6;        // Your dual variable for constraint d6
  cpg_float    *d7;        // Your dual variable for constraint d7
  cpg_float    *d8;        // Your dual variable for constraint d8
  cpg_float    *d9;        // Your dual variable for constraint d9
  cpg_float    *d10;       // Your dual variable for constraint d10
  cpg_float    *d11;       // Your dual variable for constraint d11
  cpg_float    *d12;       // Your dual variable for constraint d12
  cpg_float    *d13;       // Your dual variable for constraint d13
  cpg_float    *d14;       // Your dual variable for constraint d14
  cpg_float    *d15;       // Your dual variable for constraint d15
  cpg_float    d16;        // Your dual variable for constraint d16
  cpg_float    d17;        // Your dual variable for constraint d17
  cpg_float    d18;        // Your dual variable for constraint d18
  cpg_float    d19;        // Your dual variable for constraint d19
  cpg_float    d20;        // Your dual variable for constraint d20
  cpg_float    d21;        // Your dual variable for constraint d21
  cpg_float    d22;        // Your dual variable for constraint d22
  cpg_float    d23;        // Your dual variable for constraint d23
  cpg_float    d24;        // Your dual variable for constraint d24
  cpg_float    d25;        // Your dual variable for constraint d25
  cpg_float    d26;        // Your dual variable for constraint d26
  cpg_float    d27;        // Your dual variable for constraint d27
  cpg_float    d28;        // Your dual variable for constraint d28
  cpg_float    d29;        // Your dual variable for constraint d29
  cpg_float    d30;        // Your dual variable for constraint d30
  cpg_float    *d31;       // Your dual variable for constraint d31
  cpg_float    *d32;       // Your dual variable for constraint d32
  cpg_float    *d33;       // Your dual variable for constraint d33
  cpg_float    *d34;       // Your dual variable for constraint d34
  cpg_float    *d35;       // Your dual variable for constraint d35
  cpg_float    *d36;       // Your dual variable for constraint d36
  cpg_float    *d37;       // Your dual variable for constraint d37
  cpg_float    *d38;       // Your dual variable for constraint d38
  cpg_float    *d39;       // Your dual variable for constraint d39
  cpg_float    *d40;       // Your dual variable for constraint d40
  cpg_float    *d41;       // Your dual variable for constraint d41
  cpg_float    *d42;       // Your dual variable for constraint d42
  cpg_float    *d43;       // Your dual variable for constraint d43
  cpg_float    *d44;       // Your dual variable for constraint d44
  cpg_float    *d45;       // Your dual variable for constraint d45
  cpg_float    *d46;       // Your dual variable for constraint d46
  cpg_float    *d47;       // Your dual variable for constraint d47
  cpg_float    *d48;       // Your dual variable for constraint d48
  cpg_float    *d49;       // Your dual variable for constraint d49
  cpg_float    *d50;       // Your dual variable for constraint d50
  cpg_float    *d51;       // Your dual variable for constraint d51
  cpg_float    *d52;       // Your dual variable for constraint d52
  cpg_float    *d53;       // Your dual variable for constraint d53
  cpg_float    *d54;       // Your dual variable for constraint d54
  cpg_float    *d55;       // Your dual variable for constraint d55
  cpg_float    *d56;       // Your dual variable for constraint d56
  cpg_float    *d57;       // Your dual variable for constraint d57
  cpg_float    *d58;       // Your dual variable for constraint d58
  cpg_float    *d59;       // Your dual variable for constraint d59
  cpg_float    *d60;       // Your dual variable for constraint d60
} CPG_Dual_t;

// Solver information
typedef struct {
  cpg_float    obj_val;    // Objective function value
  cpg_int      iter;       // Number of iterations
  char         *status;    // Solver status
  cpg_float    pri_res;    // Primal residual
  cpg_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;        // Primal solution
  CPG_Dual_t *dual;        // Dual solution
  CPG_Info_t *info;        // Solver info
} CPG_Result_t;

// Parameter deltas
typedef struct {
  cpg_float    *param3;    // Delta of your parameter param3
  cpg_float    *param1;    // Delta of your parameter param1
} CPG_Delta_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern cpg_float cpg_params_vec[148];

// Sparse mappings from user-defined to canonical parameters
extern cpg_csc canon_c_map;
extern cpg_csc canon_b_map;

// Canonical parameters
extern cpg_csc canon_P;
extern cpg_float canon_c[297];
extern cpg_csc canon_A;
extern cpg_float canon_b[387];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// SCS matrix P
extern ScsMatrix scs_P;

// SCS matrix A
extern ScsMatrix scs_A;

// Struct containing SCS data
extern ScsData Scs_D;

// SCS array of SOC dimensions
extern cpg_int scs_q[15];

// Struct containing SCS cone data
extern ScsCone Scs_K;

// Struct containing SCS settings
extern ScsSettings Canon_Settings;

// SCS solution
extern cpg_float scs_x[297];
extern cpg_float scs_y[387];
extern cpg_float scs_s[387];

// Struct containing SCS solution
extern ScsSolution Scs_Sol;

// Struct containing SCS information
extern ScsInfo Scs_Info;

// Pointer to struct containing SCS workspace
extern ScsWork* Scs_Work;
