# TinyMPC Code Generation for Rocket Landing Problem
# This generates TinyMPC data that matches SCS/ECOS benchmark setup exactly

import tinympc
import os
import numpy as np

path_to_root = os.getcwd()
print(f"Working directory: {path_to_root}")

# ROCKET LANDING PROBLEM PARAMETERS (matching gen_rocket.py and run_ecos.py)
NSTATES = 6
NINPUTS = 3  
NHORIZON = 32  # MATCH SCS/ECOS horizon for fair comparison
NTOTAL = 301

# Rocket landing dynamics (copied exactly from gen_rocket.py/run_ecos.py)
Ad = np.array([[1.0, 0.0, 0.0, 0.05, 0.0, 0.0],
               [0.0, 1.0, 0.0, 0.0, 0.05, 0.0],
               [0.0, 0.0, 1.0, 0.0, 0.0, 0.05],
               [0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
               [0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
               [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])

Bd = np.array([[0.000125, 0.0, 0.0],
               [0.0, 0.000125, 0.0],
               [0.0, 0.0, 0.000125],
               [0.005, 0.0, 0.0],
               [0.0, 0.005, 0.0],
               [0.0, 0.0, 0.005]])

# Cost matrices (matching gen_rocket.py/run_ecos.py)
Q = 1e3 * np.eye(NSTATES)  # 1000 * I
R = 1e0 * np.eye(NINPUTS)  # 1 * I

# TinyMPC solver settings
rho = 1.0  # matching the value from existing rocket_landing_params files
abs_pri_tol = 1.0e-2    # matching benchmark settings
abs_dual_tol = 1.0e-2   # matching benchmark settings
max_iter = 500          # matching benchmark settings
check_termination = 1

# Bounds (matching gen_rocket.py/run_ecos.py)
u_min = -10 * np.ones(NINPUTS)
u_max = 105.0 * np.ones(NINPUTS)
x_min = np.array([-5, -5, 0, -10, -10, -10.0])  # matching exactly
x_max = np.array([5, 5, 20, 10, 10, 10.0])     # matching exactly

print(f"Generating TinyMPC code for rocket landing:")
print(f"  NSTATES: {NSTATES}")
print(f"  NINPUTS: {NINPUTS}")
print(f"  NHORIZON: {NHORIZON}")
print(f"  rho: {rho}")

# SET UP TINYMPC PROBLEM
tinympc_prob = tinympc.TinyMPC()
tinympc_prob.setup(
    Ad, Bd, Q, R, NHORIZON,  # matrices and horizon
    rho=rho,
    x_min=x_min, x_max=x_max,
    u_min=u_min, u_max=u_max,
    abs_pri_tol=abs_pri_tol, abs_dua_tol=abs_dual_tol,
    max_iter=max_iter, check_termination=check_termination
)

# GENERATE CODE
output_dir = path_to_root + "/tinympc/tinympc_generated"
print(f"Generating code to: {output_dir}")
tinympc_prob.codegen(output_dir)  

print("Code generation complete!")

# COPY FILES TO TEENSY PROJECT
mcu_dir = path_to_root + '/tinympc/tinympc_teensy'
print(f"Copying files to Teensy project: {mcu_dir}")

# Copy the generated data files (updated file paths for new API)
os.system(f'cp -R {output_dir}/src/tiny_data.cpp {mcu_dir}/src/tiny_data_workspace.cpp')
os.system(f'cp -R {output_dir}/tinympc/tiny_data.hpp {mcu_dir}/lib/tinympc/glob_opts.hpp')

print("Files copied to Teensy project!")

# Also generate the rocket_landing_params.hpp file for direct inclusion
print("Generating rocket_landing_params.hpp for compatibility...")

# Create a parameter file that matches the format used in the C++ code
params_content = f'''#pragma once

#include "admm.hpp"

// Generated by TinyMPC for rocket landing problem
// NHORIZON = {NHORIZON}, NSTATES = {NSTATES}, NINPUTS = {NINPUTS}

tinytype Adyn_data[{NSTATES} * {NSTATES}] = {{
'''

# Add Adyn data
for i in range(NSTATES):
    params_content += "\t"
    for j in range(NSTATES):
        params_content += f"{Ad[i,j]:.6f}f"
        if i < NSTATES-1 or j < NSTATES-1:
            params_content += ", "
    params_content += "\n"
params_content += "};\n\n"

# Add Bdyn data
params_content += f'''tinytype Bdyn_data[{NSTATES} * {NINPUTS}] = {{
'''
for i in range(NSTATES):
    params_content += "\t"
    for j in range(NINPUTS):
        params_content += f"{Bd[i,j]:.6f}f"
        if i < NSTATES-1 or j < NINPUTS-1:
            params_content += ", "
    params_content += "\n"
params_content += "};\n\n"

# Add fdyn (gravity term)
fd = np.array([0.0, 0.0, -0.0122625, 0.0, 0.0, -0.4905])  # from gen_rocket.py
params_content += f'''tinytype fdyn_data[{NSTATES}] = {{'''
for i in range(NSTATES):
    params_content += f"{fd[i]:.7f}f"
    if i < NSTATES-1:
        params_content += ", "
params_content += "};\n\n"

# Add Q and R data
params_content += f'''tinytype Q_data[{NSTATES}] = {{'''
for i in range(NSTATES):
    params_content += f"{Q[i,i]:.1f}f"
    if i < NSTATES-1:
        params_content += ", "
params_content += "};\n\n"

params_content += f'''tinytype R_data[{NINPUTS}] = {{'''
for i in range(NINPUTS):
    params_content += f"{R[i,i]:.1f}f"
    if i < NINPUTS-1:
        params_content += ", "
params_content += "};\n\n"

params_content += f"tinytype rho_value = {rho};\n\n"
params_content += "// Note: Kinf_data, Pinf_data, etc. are generated by TinyMPC codegen\n"
params_content += "// and included in tiny_data_workspace.cpp\n"

# Write the parameter file
params_file = f"{mcu_dir}/src/problem_data/rocket_landing_params_{NHORIZON}hz.hpp"
os.makedirs(os.path.dirname(params_file), exist_ok=True)
with open(params_file, 'w') as f:
    f.write(params_content)

print(f"Generated parameter file: {params_file}")
print("\n=== TinyMPC Generation Complete ===")
print("Your TinyMPC rocket landing code is now ready with:")
print(f"  - NHORIZON = {NHORIZON} (matches SCS/ECOS)")
print(f"  - Same dynamics, costs, and constraints as SCS/ECOS")
print("  - Files copied to tinympc_teensy project")
print("\nYou can now compile and benchmark all three solvers fairly!") 